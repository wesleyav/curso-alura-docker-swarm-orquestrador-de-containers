# docs.docker.com/docker-for-windows/release-notes/

# Requisitos e versões para o curso:
# - Docker 19.03.2
# - Docker Machine 0.16.2
# Ambos instalados via Docker Desktop Community 2.1.0.2 (deprecated)

# Donwload do Docker Desktop Community 2.1.0.2
# https://download.docker.com/win/stable/37877/Docker%20Desktop%20Installer.exe

# Donwload do VirtualBox 6.0.14
# https://download.virtualbox.org/virtualbox/6.0.14/VirtualBox-6.0.14-133895-Win.exe

# OPCIONAL
# Toolbox (deprecated)
# https://github.com/docker/toolbox/releases/tag/v19.03.1

# Verificar versão do Docker Machine (caso tenha insalado)
$ docker-machine -v

# Verificar versão do Docker
$ docker version

# Utilizando o Play With Docker	(caso haja problemas em instalar o docker na máquina)
# https://labs.play-with-docker.com/

#################################################

# Ao utilizar VirtualBox, desabilitar Hyper-V:
$ bcdedit /set hypervisorlaunchtype off

# Habilitar o Hyper-V via PowerShell:
$ Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All

# Habilitar o Hyper-V via Prompt:
$ DISM /Online /Enable-Feature /All /FeatureName:Microsoft-Hyper-V

# Listar VM´s na docker machine
$ docker-machine ls

# Criar VM na docker machine usando virtualbox
$ docker-machine create -d virtualbox vm1
$ docker-machine create -d virtualbox --virtualbox-no-vtx-check vm1

# Criar VM na docker machine usando hyper-v
$ docker-machine create --driver hyperv vm1

# Subir VM:
$ docker-machine start vm1

# Parar VM:
$ docker-machine stop vm1

# Acessar VM via SSH:
$ docker-machine ssh vm1

# Remover a VM:
$ docker-machine rm vm1

# Matar a VM:
$ docker-machine kill vm1

#################################################

# Acessar VM via SSH:
$ docker-machine ssh vm1

# Iniciar Swarm
$ docker swarm init

# Iniciar Swarm setando IP da vm1 que foi criada (será o manager do cluster)
$ docker swarm init --advertise-addr 192.168.99.100

# Visualizar informações do Docker
$ docker info

#################################################

O que aprendemos?

- O Docker Swarm é um orquestrador
- O Docker Swarm é capaz de alocar e reiniciar containers de maneira automática
- Como criar máquinas já provisionadas para utilizar o Docker com a Docker Machine utilizando comando docker-machine create
- Um cluster é um conjunto de máquinas dividindo poder computacional
- Como criar um cluster utilizando o Docker Swarm utilizando o comando docker swarm init

#################################################

# Após várias tentativas de instalação e configuração sem sucesso, consegui da seguinte forma:

# 1- Instalei o Docker Engine for Windows:
# - https://desktop.docker.com/win/stable/Docker%20Desktop%20Installer.exe
# 
# 2- Instalando Docker Machine
# Instalar o Git Bash e nele executar:

$ base=https://github.com/docker/machine/releases/download/v0.16.0 &&
  mkdir -p "$HOME/bin" &&
  curl -L $base/docker-machine-Windows-x86_64.exe > "$HOME/bin/docker-machine.exe" &&
  chmod +x "$HOME/bin/docker-machine.exe"

# 3- Instalei VirtualBox:
# https://download.virtualbox.org/virtualbox/6.1.16/VirtualBox-6.1.16-140961-Win.exe

# Configuração padrão do virtualbox.

# Terminal padrão BASH (não mais o Prompt do Windows ou PowerShell)

# Verificar versão do Docker
$ docker version

# Verificar versão do Docker Machine
$ docker-machine -v

# Listar VM´s na docker machine
$ docker-machine ls

# Hyper-V habilitado!

# Criar VM na docker machine usando virtualbox
$ docker-machine create -d virtualbox --virtualbox-no-vtx-check vm1

# Acessar VM via SSH:
$ docker-machine ssh vm1

# Iniciar Swarm setando IP da vm1 que foi criada (será o manager do cluster)
$ docker swarm init --advertise-addr 192.168.99.100

# Visualizar informações do Docker
$ docker info

# Parar VM:
$ docker-machine stop vm1

# Subir VM:
$ docker-machine start vm1

#################################################

# Sworm - orquestrador
# Workers - gerenciadores filhos, subordinados de Sworm, carregam os containers

# Criar VM na docker machine usando virtualbox
$ docker-machine create -d virtualbox --virtualbox-no-vtx-check vm2

# Criar VM na docker machine usando virtualbox
$ docker-machine create -d virtualbox --virtualbox-no-vtx-check vm3

# Acessar VM via SSH:
$ docker-machine ssh vm2

# Recuperar o código que adiciona o Worker ao Sworm (exibir token)
# Executar na vm1 (a vm Sworm)
$ docker swarm join-token worker

# Adicionar um Worker ao Swarm:

# 1- Adicionar na vm2

# Acessar VM via SSH:
$ docker-machine ssh vm2

$ docker swarm join --token SWMTKN-1-65p0a14mqrujb9gbn8xv144nhwkjjub4x9sr79qncfyz2ocylh-4wbvdmhh8vmw6n6lpmeprnw9g 192.168.99.100:2377

# 2- Adicionar na vm3

# Acessar VM via SSH:
$ docker-machine ssh vm3

$ docker swarm join --token SWMTKN-1-65p0a14mqrujb9gbn8xv144nhwkjjub4x9sr79qncfyz2ocylh-4wbvdmhh8vmw6n6lpmeprnw9g 192.168.99.100:2377

#################################################

# Listar nós que fazem parte do Sworm
$ docker node ls

# Remover o nó (worker) do Swarm:
# Aplicar no nó que quer remover do Sworm (vm3)
$ docker swarm leave

# Ainda na vm3, remover o nó:
# docker node rm + id
$ docker node rm v9p6tizug1hsoo9zz2kpljamu

# Readicionar o nó ao Swarm
# 1- Recuperar o código que adiciona o Worker ao Sworm (exibir token)
#  - Executar na vm1 (a vm Sworm)
   - $ docker swarm join-token worker

# 2- Adicionar a vm3

# Acessar VM via SSH:
$ docker-machine ssh vm3

$ docker swarm join --token SWMTKN-1-65p0a14mqrujb9gbn8xv144nhwkjjub4x9sr79qncfyz2ocylh-4wbvdmhh8vmw6n6lpmeprnw9g 192.168.99.100:2377

#################################################

# Acessar VM via SSH:
$ docker-machine ssh vm2

# Subir o container na vm2 (escopo local (nó ou máquina física) ou seja, somente a vm2 visualiza)
$ docker container run -p 8080:3000 -d aluracursos/barbearia

# Exibir o container criado
$ docker container ls

# Acessando no navegador da máquina física o endereço: localhost:8080 não exibe nada
# É necessário buscar o ip da vm2, para isso, precisa inspecionar a vm2 para obter o ip dela

# Acessar a vm1 via SSH e inspecionar a vm2
$ docker node inspect vm2

# Acessando no navegador da máquina física o endereço: 192.168.99.101:8080

# Criar container no escopo do Swarm (cluster)

# 1- Na vm2 listar o container para pegar o id
$ docker container ls
# 2- Na vm2 remover o container anteriormente criado
# docker container rm + id --force
$ docker container rm 9bf93d197015 --force

# Criar um container onde todos os outros nós possam identificar, chama-se serviço

# Na vm1 (manager)
$ docker service create -p 8080:3000 aluracursos/barbearia

#################################################

# Na vm1 (manager), listar os serviços
$ docker service ls

# (task) tarefa = instância de um serviço que foi criado

# Visualizar o detalhe da task do serviço criado
# docker service ps + id do serviço
$ docker service ps pac6slldj3xf

# Visualizar ip da vm1 com:
$ docker inspect vm1

# Acessando no navegador da máquina física o endereço: 192.168.99.100:8080 o serviço está up!

# Acessar a vm2 e remover o container na vm2
# docker container rm + id --force
$ docker container rm 60557e9a1094 --force

# Acessar a vm1 e visualizar a lista de serviços, depois pelo id do serviço
$ docker service ls
# docker service ps + id do serviço
$ docker service ps pac6slldj3xf

#################################################

O que aprendemos?

Nesta aula, aprendemos:

 - Que nós workers são responsáveis por executar containers
 - Comandos de leitura e visualização de nós, como o docker node ls
 - Comandos que leem ou alteram o estado do swarm só podem ser executados em nós managers
 - O comando docker container run sobe containers em escopo local e o docker service create cria serviços em escopo do swarm
 - Tarefas são instâncias de serviços
 - Portas são compartilhadas entre nós do swarm e são acessíveis a partir de qualquer nó graças ao routing mesh

#################################################

O papel do manager

# Caso aconteça algo na vm1 (manager)

# Removendo o nó manager do Swarm (não realizar isso, foi somente para entendimento)
$ docker swarm leave --force

# Após a vm1 estar comprometida, não será possível subir mais qualquer serviço no cluster, mesmo tentando na vm2 ou vm3, os nós workers estão "perdidos".

#################################################

# Como seria a forma correta de criar o cluster, configurando backup!

# Acessar VM1 via SSH:
$ docker-machine ssh vm1

# Iniciar Swarm setando IP da vm1 que foi criada (será o manager do cluster)
$ docker swarm init --advertise-addr 192.168.99.100

# 1- Adicionar na vm2

# Acessar VM via SSH:
$ docker-machine ssh vm2

$ docker swarm join --token SWMTKN-1-65p0a14mqrujb9gbn8xv144nhwkjjub4x9sr79qncfyz2ocylh-4wbvdmhh8vmw6n6lpmeprnw9g 192.168.99.100:2377

# 2- Adicionar na vm3

# Acessar VM via SSH:
$ docker-machine ssh vm3

$ docker swarm join --token SWMTKN-1-65p0a14mqrujb9gbn8xv144nhwkjjub4x9sr79qncfyz2ocylh-4wbvdmhh8vmw6n6lpmeprnw9g 192.168.99.100:2377

# Copiar os logs do Sworm (ficam na pasta /var/lib/docker/swarm)

# Acessar VM1 via SSH:
$ docker-machine ssh vm1

# Acessar a pasta
$ sudo su
$ cd /var/lib/docker/swarm
$ ls
$ cd

# Copiar os logs para uma pasta de backup
$ cp -r /var/lib/docker/swarm backup

# Visualizando o conteúdo da pasta criada (backup)
$ ls backup

# Voltando o backup (no caso em que o Sworm foi destruído, a vm1 e as outras vms removidas do Swarm) para a pasta padrão do Swarm
$ cp -r backup/* /var/lib/docker/swarm/

# Recriar o cluster Swarm forçando a utilizar o arquivo que agora está em /var/lib/docker/swarm
# docker swarm init --force-new-cluster --advertise-addr + ip da vm1 (manager)
$ docker swarm init --force-new-cluster --advertise-addr 192.168.99.100

#################################################

# Definir um nó worker como manager

# Acessar VM1 via SSH:
$ docker-machine ssh vm1

$ docker swarm join-token manager
# docker swarm join --token SWMTKN-1-65p0a14mqrujb9gbn8xv144nhwkjjub4x9sr79qncfyz2ocylh-2f64h145p6gr7kl1laax5cnp3 192.168.99.100:2377

# Removendo o nó manager do Swarm (no caso de já ter definido o nó como worker, se não tiver feito isso, não precisa usar "docker swarm leave --force)
$ docker swarm leave --force

# Acessar VM2 via SSH e adicioná-la como manager:
$ docker-machine ssh vm2
$ docker swarm join --token SWMTKN-1-65p0a14mqrujb9gbn8xv144nhwkjjub4x9sr79qncfyz2ocylh-2f64h145p6gr7kl1laax5cnp3 192.168.99.100:2377

# Removendo o nó manager do Swarm (no caso de já ter definido o nó como worker, se não tiver feito isso, não precisa usar "docker swarm leave --force)
$ docker swarm leave --force

# Acessar VM3 via SSH e adicioná-la como manager:
$ docker-machine ssh vm3
$ docker swarm join --token SWMTKN-1-65p0a14mqrujb9gbn8xv144nhwkjjub4x9sr79qncfyz2ocylh-2f64h145p6gr7kl1laax5cnp3 192.168.99.100:2377

# No bash:

# Criar VM4 na docker machine usando virtualbox
$ docker-machine create -d virtualbox --virtualbox-no-vtx-check vm4

# Criar VM5 na docker machine usando virtualbox
$ docker-machine create -d virtualbox --virtualbox-no-vtx-check vm5

# Acessar VM1 via SSH:
$ docker-machine ssh vm1

# Acessar vm1 e visualizar os nós
$ docker node ls

# Formatar saída do comando
$ docker node ls --format "{{.Hostname}} {{.ManagerStatus}}"

# Adicionar o nó ao Swarm
# 1- Recuperar o código que adiciona o Worker ao Sworm (exibir token)
#  - Executar na vm1 (a vm Sworm)
   - $ docker swarm join-token worker

# 2- Adicionar a vm4

# Acessar VM via SSH:
$ docker-machine ssh vm4

$ docker swarm join --token SWMTKN-1-65p0a14mqrujb9gbn8xv144nhwkjjub4x9sr79qncfyz2ocylh-4wbvdmhh8vmw6n6lpmeprnw9g 192.168.99.100:2377

# 3- Adicionar a vm5

# Acessar VM via SSH:
$ docker-machine ssh vm5

$ docker swarm join --token SWMTKN-1-65p0a14mqrujb9gbn8xv144nhwkjjub4x9sr79qncfyz2ocylh-4wbvdmhh8vmw6n6lpmeprnw9g 192.168.99.100:2377

#################################################

Algoritmo de consenso RAFT

Regras

Suporta 
(N-1) / 2 falhas

Deve ter no mínimo
(N/2) +1 quórum

N = número de managers

#################################################

O que aprendemos?

 - Que nós managers são primariamente responsáveis pela orquestração do swarm
 - A importância e como realizar o backup do swarm
 - Que podemos ter mais de um nó manager no swarm
 - A importância do Leader dentro do swarm
 - Como é feita a eleição de um novo Leader em caso de falhas
 - Os requisitos para funcionamento do RAFT

#################################################

# Acessar a vm (em questão) via ssh:
$ docker-machine ssh vm

# Rebaixar um nó manager para worker
$ docker node demote vm

# Remover a vm
$ docker node rm vm

# Em uma vm manager
$ docker swarm join-token manager

# Na vm que se quer readicionar como manager

# docker swarm join --token SWMTKN-1-65p0a14mqrujb9gbn8xv144nhwkjjub4x9sr79qncfyz2ocylh-2f64h145p6gr7kl1laax5cnp3 192.168.99.100:2377

#################################################