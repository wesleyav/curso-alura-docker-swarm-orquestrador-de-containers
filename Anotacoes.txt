# docs.docker.com/docker-for-windows/release-notes/

# Requisitos e versões para o curso:
# - Docker 19.03.2
# - Docker Machine 0.16.2
# Ambos instalados via Docker Desktop Community 2.1.0.2 (deprecated)

# Donwload do Docker Desktop Community 2.1.0.2
# https://download.docker.com/win/stable/37877/Docker%20Desktop%20Installer.exe

# Donwload do VirtualBox 6.0.14
# https://download.virtualbox.org/virtualbox/6.0.14/VirtualBox-6.0.14-133895-Win.exe

# OPCIONAL
# Toolbox (deprecated)
# https://github.com/docker/toolbox/releases/tag/v19.03.1

# Verificar versão do Docker Machine (caso tenha insalado)
$ docker-machine -v

# Verificar versão do Docker
$ docker version

# Utilizando o Play With Docker	(caso haja problemas em instalar o docker na máquina)
# https://labs.play-with-docker.com/

#################################################

# Ao utilizar VirtualBox, desabilitar Hyper-V:
$ bcdedit /set hypervisorlaunchtype off

# Habilitar o Hyper-V via PowerShell:
$ Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All

# Habilitar o Hyper-V via Prompt:
$ DISM /Online /Enable-Feature /All /FeatureName:Microsoft-Hyper-V

# Listar VM´s na docker machine
$ docker-machine ls

# Criar VM na docker machine usando virtualbox
$ docker-machine create -d virtualbox vm1
$ docker-machine create -d virtualbox --virtualbox-no-vtx-check vm1

# Criar VM na docker machine usando hyper-v
$ docker-machine create --driver hyperv vm1

# Subir VM:
$ docker-machine start vm1

# Parar VM:
$ docker-machine stop vm1

# Acessar VM via SSH:
$ docker-machine ssh vm1

# Remover a VM:
$ docker-machine rm vm1

# Matar a VM:
$ docker-machine kill vm1

#################################################

# Acessar VM via SSH:
$ docker-machine ssh vm1

# Iniciar Swarm
$ docker swarm init

# Iniciar Swarm setando IP da vm1 que foi criada (será o manager do cluster)
$ docker swarm init --advertise-addr 192.168.99.100

# Visualizar informações do Docker
$ docker info

#################################################

O que aprendemos?

- O Docker Swarm é um orquestrador
- O Docker Swarm é capaz de alocar e reiniciar containers de maneira automática
- Como criar máquinas já provisionadas para utilizar o Docker com a Docker Machine utilizando comando docker-machine create
- Um cluster é um conjunto de máquinas dividindo poder computacional
- Como criar um cluster utilizando o Docker Swarm utilizando o comando docker swarm init

#################################################

# Após várias tentativas de instalação e configuração sem sucesso, consegui da seguinte forma:

# 1- Instalei o Docker Engine for Windows:
# - https://desktop.docker.com/win/stable/Docker%20Desktop%20Installer.exe
# 
# 2- Instalando Docker Machine
# Instalar o Git Bash e nele executar:

$ base=https://github.com/docker/machine/releases/download/v0.16.0 &&
  mkdir -p "$HOME/bin" &&
  curl -L $base/docker-machine-Windows-x86_64.exe > "$HOME/bin/docker-machine.exe" &&
  chmod +x "$HOME/bin/docker-machine.exe"

# 3- Instalei VirtualBox:
# https://download.virtualbox.org/virtualbox/6.1.16/VirtualBox-6.1.16-140961-Win.exe

# Configuração padrão do virtualbox.

# Terminal padrão BASH (não mais o Prompt do Windows ou PowerShell)

# Verificar versão do Docker
$ docker version

# Verificar versão do Docker Machine
$ docker-machine -v

# Listar VM´s na docker machine
$ docker-machine ls

# Hyper-V habilitado!

# Criar VM na docker machine usando virtualbox
$ docker-machine create -d virtualbox --virtualbox-no-vtx-check vm1

# Acessar VM via SSH:
$ docker-machine ssh vm1

# Iniciar Swarm setando IP da vm1 que foi criada (será o manager do cluster)
$ docker swarm init --advertise-addr 192.168.99.100

# Visualizar informações do Docker
$ docker info

# Parar VM:
$ docker-machine stop vm1

# Subir VM:
$ docker-machine start vm1

#################################################

# Sworm - orquestrador
# Workers - gerenciadores filhos, subordinados de Sworm, carregam os containers

# Criar VM na docker machine usando virtualbox
$ docker-machine create -d virtualbox --virtualbox-no-vtx-check vm2

# Criar VM na docker machine usando virtualbox
$ docker-machine create -d virtualbox --virtualbox-no-vtx-check vm3

# Acessar VM via SSH:
$ docker-machine ssh vm2

# Recuperar o código que adiciona o Worker ao Sworm (exibir token)
# Executar na vm1 (a vm Sworm)
$ docker swarm join-token worker

# Adicionar um Worker ao Swarm:

# 1- Adicionar na vm2

# Acessar VM via SSH:
$ docker-machine ssh vm2

$ docker swarm join --token SWMTKN-1-65p0a14mqrujb9gbn8xv144nhwkjjub4x9sr79qncfyz2ocylh-4wbvdmhh8vmw6n6lpmeprnw9g 192.168.99.100:2377

# 2- Adicionar na vm3

# Acessar VM via SSH:
$ docker-machine ssh vm3

$ docker swarm join --token SWMTKN-1-65p0a14mqrujb9gbn8xv144nhwkjjub4x9sr79qncfyz2ocylh-4wbvdmhh8vmw6n6lpmeprnw9g 192.168.99.100:2377

#################################################

# Listar nós que fazem parte do Sworm
$ docker node ls

# Remover o nó (worker) do Swarm:
# Aplicar no nó que quer remover do Sworm (vm3)
$ docker swarm leave

# Ainda na vm3, remover o nó:
# docker node rm + id
$ docker node rm v9p6tizug1hsoo9zz2kpljamu

# Readicionar o nó ao Swarm
# 1- Recuperar o código que adiciona o Worker ao Sworm (exibir token)
#  - Executar na vm1 (a vm Sworm)
   - $ docker swarm join-token worker

# 2- Adicionar a vm3

# Acessar VM via SSH:
$ docker-machine ssh vm3

$ docker swarm join --token SWMTKN-1-65p0a14mqrujb9gbn8xv144nhwkjjub4x9sr79qncfyz2ocylh-4wbvdmhh8vmw6n6lpmeprnw9g 192.168.99.100:2377

#################################################

# Acessar VM via SSH:
$ docker-machine ssh vm2

# Subir o container na vm2 (escopo local (nó ou máquina física) ou seja, somente a vm2 visualiza)
$ docker container run -p 8080:3000 -d aluracursos/barbearia

# Exibir o container criado
$ docker container ls

# Acessando no navegador da máquina física o endereço: localhost:8080 não exibe nada
# É necessário buscar o ip da vm2, para isso, precisa inspecionar a vm2 para obter o ip dela

# Acessar a vm1 via SSH e inspecionar a vm2
$ docker node inspect vm2

# Acessando no navegador da máquina física o endereço: 192.168.99.101:8080

# Criar container no escopo do Swarm (cluster)

# 1- Na vm2 listar o container para pegar o id
$ docker container ls
# 2- Na vm2 remover o container anteriormente criado
# docker container rm + id --force
$ docker container rm 9bf93d197015 --force

# Criar um container onde todos os outros nós possam identificar, chama-se serviço

# Na vm1 (manager)
$ docker service create -p 8080:3000 aluracursos/barbearia

#################################################